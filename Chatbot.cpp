#include <algorithm>
#include <fstream>
#include <iostream>
#include <regex>
#include <string>
#include <unordered_map>
#include <vector>

using namespace std;

// A structure to store information about a chatbot's response
struct Response {
  string text;
  vector<string> keywords;
};

// A function to generate a response to a user's input
string generateResponse(const string &input,
                        const unordered_map<string, Response> &responses) {
  // Convert the input string to lowercase
  string lowercase_input = input;
  transform(lowercase_input.begin(), lowercase_input.end(),
            lowercase_input.begin(), ::tolower);

  // Check if the input string matches any of the keywords for a pre-defined
  // response
  for (const auto &[key, value] : responses) {
    for (const auto &keyword : value.keywords) {
      if (lowercase_input.find(keyword) != string::npos) {
        return value.text;
      }
    }
  }

  // If no matches were found, return the default response
  return responses.at("default").text;
}

vector<string> split(const string &s, char delimiter) {
  vector<string> tokens;
  string token;
  istringstream token_stream(s);
  while (getline(token_stream, token, delimiter)) {
    tokens.push_back(token);
  }
  return tokens;
}

// A class to represent a chatbot
class Chatbot {
public:
  Chatbot() {
    // Load the responses from a file
    ifstream fin("responses.txt");
    string line;
    while (getline(fin, line)) {
      size_t delimiter_pos = line.find(":");
      if (delimiter_pos == string::npos) {
        continue;
      }
      string key = line.substr(0, delimiter_pos);
      string value = line.substr(delimiter_pos + 1);
      size_t keyword_start_pos = value.find("[");
      size_t keyword_end_pos = value.find("]");
      if (keyword_start_pos == string::npos ||
          keyword_end_pos == string::npos) {
        continue;
      }
      string keywords_str = value.substr(
          keyword_start_pos + 1, keyword_end_pos - keyword_start_pos - 1);
      vector<string> keywords = split(keywords_str, ',');
      string text = value.substr(keyword_end_pos + 2);
      responses_[key] = {text, keywords};
    }
  }

  void train(const string &input, const string &response) {
    // Convert the input string to snake case
    string input_in_snake_case = input;
    transform(input_in_snake_case.begin(), input_in_snake_case.end(),
              input_in_snake_case.begin(), ::tolower);
    input_in_snake_case = regex_replace(input_in_snake_case, regex(" "), "_");

    vector<string> keywords = split(input, ' ');
    responses_[input] = {response, keywords};
    // Open the responses.txt file in append mode
    ofstream fout("responses.txt", ios::app);
    // Write the input/response pair to the file
    fout << input_in_snake_case << ": [" << input << "] " << response << endl
         << endl;
    // Close the file
    fout.close();
  }

  void run() {
    cout << "Welcome to the Chatbot Generated by ChatGPT!" << endl << endl;
    cout << "You can train me by entering a training command in the following "
            "format: '/train <input>:<response>'"
         << endl
         << endl;
    cout << "For example: '/train hello:Hello there!'" << endl << endl;
    while (true) {
      cout << "îº§ ";

      // Get the user's input
      string input;
      getline(cin, input);

      // Check if the input is a training command
      if (input.find("/train") == 0) {
        // Extract the input and response from the rest of the string
        size_t delimiter_pos = input.find(":");
        if (delimiter_pos == string::npos) {
          cout << "Invalid training command!" << endl;
          continue;
        }
        string input_str = input.substr(7, delimiter_pos - 7);
        string response = input.substr(delimiter_pos + 1);

        // Train the chatbot
        train(input_str, response);
        cout << "Chatbot trained to respond to '" << input_str << "' with '"
             << response << "'" << endl;
      } else {
        // Generate a response
        string response = generateResponse(input, responses_);

        // Print the response
        cout << response << endl;
      }
    }
  }

private:
  unordered_map<string, Response> responses_;
};

int main() {
  Chatbot chatbot;
  chatbot.run();

  return 0;
}